# Stage 1: Builder – install gems and assets
FROM ruby:3.2-slim AS builder

# Install build tools and dependencies for building gems.
# Pin the package versions as determined:
# - build-essential version 12.9
# - libsqlite3-dev version 3.40.1-2+deb12u1
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
      build-essential=12.9 \
      libsqlite3-dev=3.40.1-2+deb12u1 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Gemfile and Gemfile.lock, then install gems
# Pin bundler to version 2.6.3 as per Gemfile.lock
COPY Gemfile Gemfile.lock ./
RUN gem install bundler:2.6.3 && bundle install --without development test

# Copy application source code (ensure .dockerignore excludes sensitive/unneeded files)
COPY . .

# Stage 2: Final image – runtime environment with privilege dropping via gosu
FROM ruby:3.2-slim

# Set versions for gosu and its key
ENV GOSU_VERSION 1.17
ENV GOSU_GPG_KEY B42F6819007F00F88E364FD4036A9C25BF357DD4

# Install runtime dependencies, tools for gosu download/verification, and gosu itself
# Pin versions for reproducibility (Debian 12 Bookworm base)
# Check packages.debian.org/bookworm/<package> for latest stable versions if needed
# --- Ignore DL4006 because we already implemented pipefail as recommended ---
# hadolint ignore=DL4006,SC3040
RUN set -eux; \
# Removed '-o pipefail' from the line above ---^
    savedAptMark="$(apt-mark showmanual)"; \
    apt-get update; \
    # Install runtime libs plus tools needed for gosu install/verify, with pinned versions
    apt-get install -y --no-install-recommends \
      libsqlite3-0=3.40.1-2+deb12u1 \
      ca-certificates=20230311nmu1 \
      gpg=2.2.40-1.1 \
      gpgv=2.2.40-1.1 \
      dirmngr=2.2.40-1.1 \
      wget=1.21.3-1+b1; \
    rm -rf /var/lib/apt/lists/*; \
    \
    # Import gosu GPG key
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GOSU_GPG_KEY" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$GOSU_GPG_KEY"; \
    \
    # Download gosu binary and signature using wget -q (quiet)
    dpkgArch="$(dpkg --print-architecture)"; \
    wget -q -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
    wget -q -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
    \
    # Verify the signature
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
    # Uncomment the following command if you have troubles with the key verification on some systems
    # gpg --batch --trust-model always --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
    rm /usr/local/bin/gosu.asc; \
    rm -rf /root/.gnupg; \
    \
    # Make gosu executable
    chmod +x /usr/local/bin/gosu; \
    # Verify that gosu works
    gosu --version; \
    gosu nobody true; \
    \
    # Clean up build dependencies (gpg, gpgv, dirmngr, wget)
    apt-mark auto '.*' > /dev/null; \
    apt-mark manual "$savedAptMark" > /dev/null; \
    apt-get purge -y --auto-remove gpg gpgv dirmngr wget; \
    # Verify dependencies were removed
    ! dpkg -l | grep -E '(wget|gpg|gpgv|dirmngr)'

# Create a non-root user and group for security principals
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /sbin/nologin -c "Application user" appuser

WORKDIR /app

# Copy app code and gem bundles from builder stage
COPY --from=builder /app .
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy the entrypoint script into the image
COPY docker-entrypoint.sh /usr/local/bin/
# Change ownership of app/gems *before* entrypoint runs, make entrypoint executable
RUN chown -R appuser:appuser /app /usr/local/bundle && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Set environment to production
ENV RACK_ENV=production

# Expose the port used by the Sinatra app
EXPOSE 4568

# NOTE on execution:
# The ENTRYPOINT script (docker-entrypoint.sh) runs as root.
# It performs any necessary setup requiring root privileges (like chown on mounted volumes).
# It then uses 'exec gosu appuser ...' to switch to the non-root 'appuser'
# before executing the CMD, enhancing security by not running the application as root.

# Set the entrypoint script to run when the container starts
ENTRYPOINT ["docker-entrypoint.sh"]

# Use exec form to run the Sinatra app in production
# This command is passed as arguments ("$@") to the entrypoint script,
# which then executes it as 'appuser' via gosu.
CMD ["bundle", "exec", "ruby", "app.rb", "-o", "0.0.0.0", "-p", "4568"]