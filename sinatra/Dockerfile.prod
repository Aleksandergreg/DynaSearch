# Dockerfile.prod
# Updated: Wednesday, April 9, 2025 at 9:50 AM CEST

# Stage 1: Builder – install gems and assets
FROM ruby:3.2-slim AS builder

# Install build tools and dependencies for building gems.
# Pin the package versions as determined:
# - build-essential version 12.9
# - libsqlite3-dev version 3.40.1-2+deb12u1
RUN apt-get update -qq && \
    apt-get install -y --no-install-recommends \
      build-essential=12.9 \
      libsqlite3-dev=3.40.1-2+deb12u1 && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Gemfile and Gemfile.lock, then install gems
# Pin bundler to version 2.6.3 as per Gemfile.lock
COPY Gemfile Gemfile.lock ./
RUN gem install bundler:2.6.3 && bundle install --without development test

# Copy application source code (ensure .dockerignore excludes sensitive/unneeded files)
COPY . .

# Stage 2: Final image – runtime environment with privilege dropping via gosu
FROM ruby:3.2-slim

# Set version for gosu (using preferred ENV syntax)
ENV GOSU_VERSION=1.17
# GPG Key ID is hardcoded below where used

# Install runtime dependencies, tools for gosu download/verification, and gosu itself
# Pin libsqlite3-0 as requested, install latest available versions for others.
# Ignore DL3008 (pinning removed to fix build error E: Version not found)
# hadolint ignore=DL3008
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
      libsqlite3-0=3.40.1-2+deb12u1 \
      ca-certificates \
      gpg \
      gpgv \
      dirmngr \
      gpg-agent \
      wget; \
    rm -rf /var/lib/apt/lists/*

# Layer 2: Download and verify gosu using the installed tools
RUN set -eux; \
    # Import gosu GPG key (Hardcoded ID)
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "B42F6819007F00F88E364FD4036A9C25BF357DD4" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "B42F6819007F00F88E364FD4036A9C25BF357DD4"; \
    # Replaced variable with actual key ID ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    \
    # Download gosu binary and signature using wget -q (quiet)
    dpkgArch="$(dpkg --print-architecture)"; \
    wget -q -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
    wget -q -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
    \
    # Verify the signature
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
    \
    # Make gosu executable & test it
    chmod +x /usr/local/bin/gosu; \
    gosu --version; \
    gosu nobody true; \
    \
    # Clean up downloaded signature file and gpg state
    rm /usr/local/bin/gosu.asc; \
    rm -rf /root/.gnupg

# Layer 3: Purge the temporary build tools (KEEPING gpgv for apt)
RUN set -eux; \
    apt-get purge -y --auto-remove gpg dirmngr gpg-agent wget; \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user and group for security principals
RUN groupadd -r appuser && useradd -r -g appuser -d /app -s /sbin/nologin -c "Application user" appuser

WORKDIR /app

# Copy app code and gem bundles from builder stage
COPY --from=builder /app .
COPY --from=builder /usr/local/bundle /usr/local/bundle

# Copy the entrypoint script into the image
COPY docker-entrypoint.sh /usr/local/bin/

RUN chown -R appuser:appuser /app /usr/local/bundle && \
    chmod +x /usr/local/bin/docker-entrypoint.sh

# Set environment to production (using preferred ENV syntax)
ENV RACK_ENV=production

# Expose the port used by the Sinatra app
EXPOSE 4568

# NOTE on execution:
# The ENTRYPOINT script (docker-entrypoint.sh) runs as root.
# It performs any necessary setup requiring root privileges (like chown on mounted volumes).
# It then uses 'exec gosu appuser ...' to switch to the non-root 'appuser'
# before executing the CMD, enhancing security by not running the application as root.

# Set the entrypoint script to run when the container starts
ENTRYPOINT ["docker-entrypoint.sh"]

# Use exec form to run the Sinatra app in production
# This command is passed as arguments ("$@") to the entrypoint script,
# which then executes it as 'appuser' via gosu.
CMD ["bundle", "exec", "rackup", "--host", "0.0.0.0", "--port", "4568", "--env", "production"]
